import{_ as a,c as s,f as n,o as t}from"./app-B9lZb-up.js";const i={};function l(d,e){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="setting-up-example-databases" tabindex="-1"><a class="header-anchor" href="#setting-up-example-databases"><span>Setting up example databases</span></a></h1><p>In this course we use the forta database. This database is made by Ben Forta (<a href="http://forta.com/" target="_blank" rel="noopener noreferrer">http://forta.com/</a>). On this page we will go step by step how to create this database.</p><p>You will need a mysql server (XAMPP) and a mysql client(command prompt, Bash or PowerShell will do).</p><p>You will also need to download the files <a href="https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip" target="_blank" rel="noopener noreferrer">https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip</a> and unzip them.</p><div class="hint-container tip"><p class="hint-container-title">SQL Keywords in capital letters</p><p>In this course we will put all the SQL-code in capitals, this is not necessary but it will make clear to you what is static SQL-code and what are names that you can change.</p></div><h2 id="connecting-to-the-database" tabindex="-1"><a class="header-anchor" href="#connecting-to-the-database"><span>Connecting to the database</span></a></h2><p>First start up your databaseserver as you learned on the previous page. Now open your mysql client in the folder where you unziped the files. You can open the client by typing <code>PowerShell</code> in the address bar in your windows explorer. Now type <code>mysql -u root</code> in your client.</p><ul><li><code>mysql</code>: this tells your command prompt or powerschell to start the mysql client.</li><li><code>-u root</code>: the -u tells the client to log with the given name, in this case &#39;root&#39;.</li><li><code>-p</code>: the -p tells the client to ask for a password after you pressed enter.</li><li><code>-h 127.0.0.1</code>: this tells the client to connect on ip-address 127.0.0.1, can be used for connection on remote servers, when not specified it will use localhost.</li></ul><p>You should be connected now and see</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">MariaDB [(none)]&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>MariaDB is the name of the database server that is used in xampp. Between the <code>[ ]</code>is the name of the selected database, for the moment we don&#39;t have a database selected so it says <code>(none)</code>.</p><p>Before we create a new database, let&#39;s see what is already in here with</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SHOW</span> <span class="token keyword">databases</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will show a list of available databases.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+--------------------+</span>
<span class="line">| Database           |</span>
<span class="line">+--------------------+</span>
<span class="line">| information_schema |</span>
<span class="line">| mysql              |</span>
<span class="line">| performance_schema |</span>
<span class="line">| phpmyadmin         |</span>
<span class="line">| test               |</span>
<span class="line">+--------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can see a database named test, let&#39;s have a look. Do <code>USE name;</code> to select the database with that name. you see that the name of the selected database now <code>test</code> is. Do <code>show tables;</code>to ask the list of tables in the database. <code>Empty set (0.00 sec)</code>, it looks like this database is completely empty, you can leave it or delete it with <code>DROP DATABASE test;</code></p><h2 id="creating-the-database" tabindex="-1"><a class="header-anchor" href="#creating-the-database"><span>Creating the database</span></a></h2><p>First we will create a completely empty database with:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> forta<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now an empty database with name forta has been created and we will now use that database with:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">USE</span> forta<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Once you see that the prompt has changed to: <code>MariaDB [forta]&gt;</code>, you can continue. We are now going to create tables and columns in those tables but we are not doing it ourself. To execute a script, use the <code>SOURCE scriptname;</code> command, we want to execute the create.sql file we got from the zip folder first.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">SOURCE <span class="token keyword">create</span><span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you get an error like this;</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">ERROR: Failed to open file &#39;create.sql&#39;, error: 2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Check if the create.sql file is in the folder where you started you PowerShell or command prompt.</p><p>Now wait until the prompt is back to its normal state. There should be a table in this database now, let&#39;s check with <code>SHOW TABLES;</code>.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+-----------------+</span>
<span class="line">| Tables_in_forta |</span>
<span class="line">+-----------------+</span>
<span class="line">| customers       |</span>
<span class="line">| orderitems      |</span>
<span class="line">| orders          |</span>
<span class="line">| productnotes    |</span>
<span class="line">| products        |</span>
<span class="line">| vendors         |</span>
<span class="line">+-----------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To see how a table was made, use <code>DESC tablename;</code>so let&#39;s test it with <code>DESC products;</code></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+------------+--------------+------+-----+---------+-------+</span>
<span class="line">| Field      | Type         | Null | Key | Default | Extra |</span>
<span class="line">+------------+--------------+------+-----+---------+-------+</span>
<span class="line">| prod_id    | char(10)     | NO   | PRI | NULL    |       |</span>
<span class="line">| vend_id    | int(11)      | NO   | MUL | NULL    |       |</span>
<span class="line">| prod_name  | char(255)    | NO   |     | NULL    |       |</span>
<span class="line">| prod_price | decimal(8,2) | NO   |     | NULL    |       |</span>
<span class="line">| prod_desc  | text         | YES  |     | NULL    |       |</span>
<span class="line">+------------+--------------+------+-----+---------+-------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this table we can see what the name, the type, if it can be empty(Null), if it is a key and what the default value is for every column. This one doesn&#39;t have any default values so it says NULL. To see all of the information inside of a table, you can always use:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span><span class="token operator">*</span> <span class="token keyword">FROM</span> tablename<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>(more info on this will come in the next chapter: Retreiving data) So now we are going to look inside the products table to know what products this company sells.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We get this as answer: <code>Empty set (0.00 sec)</code>. This means that the company doesn&#39;t have any products yet, so let&#39;s put some in.</p><h2 id="filling-the-database" tabindex="-1"><a class="header-anchor" href="#filling-the-database"><span>Filling the database</span></a></h2><p>Again, we are not going to do this ourself but use another script for this:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">SOURCE populate<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If we try to execute the command again now we can see the following:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">MariaDB [forta]&gt; select * from products;</span>
<span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span>
<span class="line">| prod_id | vend_id | prod_name      | prod_price | prod_desc                                                      |</span>
<span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span>
<span class="line">| ANV01   |    1001 | .5 ton anvil   |       5.99 | .5 ton anvil, black, complete with handy hook                  |</span>
<span class="line">| ANV02   |    1001 | 1 ton anvil    |       9.99 | 1 ton anvil, black, complete with handy hook and carrying case |</span>
<span class="line">| ANV03   |    1001 | 2 ton anvil    |      14.99 | 2 ton anvil, black, complete with handy hook and carrying case |</span>
<span class="line">| DTNTR   |    1003 | Detonator      |      13.00 | Detonator (plunger powered), fuses not included                |</span>
<span class="line">| FB      |    1003 | Bird seed      |      10.00 | Large bag (suitable for road runners)                          |</span>
<span class="line">| FC      |    1003 | Carrots        |       2.50 | Carrots (rabbit hunting season only)                           |</span>
<span class="line">| FU1     |    1002 | Fuses          |       3.42 | 1 dozen, extra long                                            |</span>
<span class="line">| JP1000  |    1005 | JetPack 1000   |      35.00 | JetPack 1000, intended for single use                          |</span>
<span class="line">| JP2000  |    1005 | JetPack 2000   |      55.00 | JetPack 2000, multi-use                                        |</span>
<span class="line">| OL1     |    1002 | Oil can        |       8.99 | Oil can, red                                                   |</span>
<span class="line">| SAFE    |    1003 | Safe           |      50.00 | Safe with combination lock                                     |</span>
<span class="line">| SLING   |    1003 | Sling          |       4.49 | Sling, one size fits all                                       |</span>
<span class="line">| TNT1    |    1003 | TNT (1 stick)  |       2.50 | TNT, red, single stick                                         |</span>
<span class="line">| TNT2    |    1003 | TNT (5 sticks) |      10.00 | TNT, red, pack of 10 sticks                                    |</span>
<span class="line">+---------+---------+----------------+------------+----------------------------------------------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="game-reviews-database" tabindex="-1"><a class="header-anchor" href="#game-reviews-database"><span>Game Reviews database</span></a></h2><p>Download the <a href="/files/gamereviews_example.zip">gamereviews_example.zip</a> file and import the <code>gamereviews_example.sql</code> file in your database to get access to the tables for this exercise.</p><p>Execute the following command in this project directory with the <code>mysql</code> client:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">source gamereviews_example<span class="token punctuation">.</span><span class="token keyword">sql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="spacex-database" tabindex="-1"><a class="header-anchor" href="#spacex-database"><span>SpaceX database</span></a></h2><p>Download the <a href="/files/spacex.zip">spacex.zip</a> file and import the <code>spacex.sql</code> file in your database to get access to the tables for this exercise.</p><p>Execute the following command in this project directory with the <code>mysql</code> client:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">source spacex<span class="token punctuation">.</span><span class="token keyword">sql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="a-larger-test-database" tabindex="-1"><a class="header-anchor" href="#a-larger-test-database"><span>A larger test database</span></a></h2><p>Some of the examples use a larger testdatabase, a fake database with employees to be exact. If you want test on this bigger database you can get it over at <a href="https://github.com/datacharmer/test_db" target="_blank" rel="noopener noreferrer">datacharmer/test_db</a> on Github. Download the respository as zip or use <code>git clone</code>. Select the folder where you saved the repository and start your mysql client here. Now reconnect to your database using the following command:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">mysql <span class="token operator">-</span>u root</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We don&#39;t need to create a database ourselfs because that&#39;s what the script does so we only need to run</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">SOURCE employees<span class="token punctuation">.</span><span class="token keyword">sql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will take a little longer because this script is way bigger. You can open another client and connect to continue this course while the other client is still running.</p><p>So now you have a database to test on. To continue go to the next chapter: Retreiving data.</p>`,55)]))}const o=a(i,[["render",l],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/exercises/02-example-databases/","title":"Setting up example databases","lang":"nl-BE","frontmatter":{},"headers":[{"level":2,"title":"Connecting to the database","slug":"connecting-to-the-database","link":"#connecting-to-the-database","children":[]},{"level":2,"title":"Creating the database","slug":"creating-the-database","link":"#creating-the-database","children":[]},{"level":2,"title":"Filling the database","slug":"filling-the-database","link":"#filling-the-database","children":[]},{"level":2,"title":"Game Reviews database","slug":"game-reviews-database","link":"#game-reviews-database","children":[]},{"level":2,"title":"SpaceX database","slug":"spacex-database","link":"#spacex-database","children":[]},{"level":2,"title":"A larger test database","slug":"a-larger-test-database","link":"#a-larger-test-database","children":[]}],"git":{"updatedTime":1737539116000,"contributors":[{"name":"verwo","username":"verwo","email":"wouter_verstraete@hotmail.com","commits":1,"url":"https://github.com/verwo"}]},"filePathRelative":"exercises/02-example-databases/index.md"}');export{o as comp,c as data};
